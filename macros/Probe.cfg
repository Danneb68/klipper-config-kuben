[homing_override]
set_position_z:0 # Make printer think Z axis is at zero, so we can force a move upwards away from build plate
axes: z #will only call override if x is involved in the homing call
gcode:
    G90
    G1 Z10 F3000 ; move up to prevent accidentally scratching build plate    
    {% if "x" not in (printer.toolhead.homed_axes | lower) %}
        G28 X
        G0 X{printer.toolhead.axis_minimum.x + 25}
    {% endif %}
    {% if "y" not in (printer.toolhead.homed_axes | lower) %}
        G28 Y        #Will only home XY if they are not currently homed
        G0 Y{printer.toolhead.axis_maximum.y - 25}
    {% endif %}
    PROBE_OUT
    G1 X153 Y119 F6000 ; Adjusted for normal klack offsets with a 235x235 bed X: 117.5 - x_offset, Y: 117.5 - y_offset
    G28 Z
    G1 Z20
    
    # wait for moves to finish, then pause 0.25s for detection
    M400
    G4 P250
    PROBE_IN


[gcode_macro CheckProbe]
## internal state variables; not for configuration!
variable_batch_mode_enabled: False
variable_probe_state: None
gcode:
    RESPOND TYPE=command MSG="{ printer['gcode_macro CheckProbe'] }"

[gcode_macro _ASSERT_PROBE_STATE]
description: ensures probe is in a known state; QUERY_PROBE must have been called before this macro!
gcode:
    ## QUERY_PROBE manually-verified results, when microswitch not depressed
    ## "TRIGGERED" -> 1 :: probe stowed
    ## "open"      -> 0 :: probe deployed
    {% set last_query_state = "stowed" if printer.probe.last_query == 1 else "deployed" %}

    {% if params.MUST_BE != last_query_state %}
        { action_raise_error("expected probe state to be {} but is {} ({})".format(params.MUST_BE, last_query_state, printer.probe.last_query)) }
    {% else %}
        ## all good; update state
        SET_GCODE_VARIABLE MACRO=CheckProbe VARIABLE=probe_state VALUE="'{ last_query_state }'"
    {% endif %}


[gcode_macro ASSERT_PROBE_DEPLOYED]
description: error if probe not deployed
gcode:
    # wait for moves to finish, then pause 0.25s for detection
    M400
    G4 P250

    QUERY_PROBE
    _ASSERT_PROBE_STATE MUST_BE=deployed


[gcode_macro ASSERT_PROBE_STOWED]
description: error if probe not stowed
gcode:
    # wait for moves to finish, then pause 0.25s for detection
    M400
    G4 P250

    QUERY_PROBE
    _ASSERT_PROBE_STATE MUST_BE=stowed

[gcode_macro PROBE_BEGIN_BATCH]
description: begin  probe batch mode
gcode:
    SET_GCODE_VARIABLE MACRO=CheckProbe VARIABLE=batch_mode_enabled VALUE=True
    RESPOND TYPE=command MSG="Probe batch mode enabled"


[gcode_macro PROBE_END_BATCH]
description: end  probe batch mode and stow probe
gcode:
    SET_GCODE_VARIABLE MACRO=CheckProbe VARIABLE=batch_mode_enabled VALUE=False
    RESPOND TYPE=command MSG="Probe batch mode disabled"
    PROBE_IN


[gcode_macro PROBE_OUT]
description: deploy probe
gcode:
		
   {% set probe = printer["gcode_macro CheckProbe"] %}

   {% if probe.batch_mode_enabled and probe.probe_state == "deployed" %}
            RESPOND TYPE=command MSG="Probe batch mode enabled: already deployed"
   {% else %}
			# ensure the probe is currently stowed; can't deploy what isn't stowed.
			ASSERT_PROBE_STOWED

			G90

			# move to probe 
			G0 X153 Y119 F4000
		    G1 X321 Y301 

			# wait 1/4 second
			M400
			G4 P250

			# confirm deploy was successful
			ASSERT_PROBE_DEPLOYED

			# move out of the dock in a straight line
			G1 Y250
            G1 X153 Y119
   {% endif %}




[gcode_macro PROBE_IN]
description: stow probe
gcode:

    {% set probe = printer["gcode_macro CheckProbe"] %}


    {% if probe.batch_mode_enabled %}
        RESPOND TYPE=command MSG="Probe batch mode enabled: not stowing"
    {% else %}
	    RESPOND TYPE=command MSG="Docking probe"
        # ensure the probe is currently deployed; can't stow what isn't deployed.
        ASSERT_PROBE_DEPLOYED

        G90

        # move to the exit/re-entry staging position
        G0 X153 Y119 F4000
		G1 X323 
        G1 Y301 
         
	

        # wait for moves to finish, pause to force 90deg travel swipe
        M400
        G4 P250

        # quick swipe off
        G1 X250
        G1 X153 Y119

        # confirm stowing was successful
        ASSERT_PROBE_STOWED
  {% endif %}


[gcode_macro BED_MESH_CALIBRATE] #macro with parameter passing
rename_existing: _BED_MESH_CALIBRATE
gcode:
    PROBE_OUT
    _BED_MESH_CALIBRATE {rawparams}
    PROBE_IN


[gcode_macro G29] #reliant on the macro above
gcode:
    BED_MESH_CALIBRATE

[gcode_macro Mesh_bed_leveling] #reliant on the macro above
gcode:
    BED_MESH_CALIBRATE

    
[gcode_macro PROBE_CALIBRATE]
rename_existing: _PROBE_CALIBRATE
gcode:
    {% if not 'xyz' in printer.toolhead.homed_axes %}
    G28
    {% endif %}
    PROBE_OUT
    G90
    G1 Z20
    G1 X110 Y93 F12000 ; Readjust for center of bed adjusted for probe offset
    _PROBE_CALIBRATE
    TESTZ Z=20
    M117 Remove the Klack to continue calibration!


[gcode_macro PROBE_ACCURACY]
rename_existing: _PROBE_ACCURACY
gcode:
    {% if not 'xyz' in printer.toolhead.homed_axes %}
    G28
    {% endif %}
    PROBE_OUT
    G90
    G1 X110 Y83 F12000 ; Readjust for center of bed adjusted for probe offset
    _PROBE_ACCURACY
    PROBE_IN


[gcode_macro Z_TILT_ADJUST] #Uncomment this macro if using dual z with z_tilt
rename_existing: _Z_TILT_ADJUST
gcode:
    PROBE_OUT
    _Z_TILT_ADJUST
    PROBE_IN
